










# Add the current directory to path so we can import our business logic
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import our business logic functions
from business_logic_refactor import (
    batch_search_plasmids,
    add_plasmid_by_string,
    modify_plasmid_by_string,
    delete_plasmid_by_string
)

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend communication

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "healthy", "message": "Plasmid API is running"}), 200

@app.route('/api/search', methods=['POST'])
def search_plasmids():
    """
    Search for plasmids by IDs
    Expects: {"query": "5317-1, 4391-1, 1234-2"}
    Returns: search results with found/not found plasmids
    """
    try:
        data = request.get_json()
        if not data or 'query' not in data:
            return jsonify({"error": "Missing 'query' field"}), 400

        query = data['query'].strip()
        if not query:
            return jsonify({"error": "Query cannot be empty"}), 400

        # Use your existing business logic
        results = batch_search_plasmids(query)

        # Convert to dict format for JSON response
        if hasattr(results, 'to_dict'):
            # If PlasmidCollection has to_dict method
            response_data = results.to_dict(results)
        else:
            # Fallback: convert manually
            response_data = {
                "found": f"{len(results)}/unknown",
                "results": []
            }
            for plasmid in results:
                response_data["results"].append({
                    "id": f"{plasmid.lot}-{plasmid.sublot}",
                    "lot": plasmid.lot,
                    "sublot": plasmid.sublot,
                    "bag": plasmid.bag,
                    "volume_1": plasmid.volume_1,
                    "volume_2": plasmid.volume_2,
                    "notes": plasmid.notes
                })

        return jsonify(response_data), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/add', methods=['POST'])
def add_plasmid():
    """
    Add a new plasmid
    Expects: {
        "plasmid_id": "5317-1",
        "volume_1": 2.5,
        "volume_2": 1.0,  // optional
        "notes": "Sample notes"  // optional
    }
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Missing request body"}), 400

        # Validate required fields
        required_fields = ['plasmid_id', 'volume_1']
        for field in required_fields:
            if field not in data:
                return jsonify({"error": f"Missing required field: {field}"}), 400

        plasmid_id = data['plasmid_id']
        volume_1 = data['volume_1']
        volume_2 = data.get('volume_2')  # Optional
        notes = data.get('notes')        # Optional

        # Use your existing business logic
        result = add_plasmid_by_string(plasmid_id, volume_1, volume_2, notes)

        return jsonify({
            "success": True,
            "message": f"Successfully added plasmid {plasmid_id}",
            "plasmid_id": plasmid_id
        }), 201

    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/modify', methods=['PUT'])
def modify_plasmid():
    """
    Modify an existing plasmid
    Expects: {
        "plasmid_id": "5317-1",
        "volume_1": 2.5,     // optional
        "volume_2": 1.0,     // optional
        "notes": "Updated notes"  // optional
    }
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Missing request body"}), 400

        if 'plasmid_id' not in data:
            return jsonify({"error": "Missing required field: plasmid_id"}), 400

        plasmid_id = data['plasmid_id']
        volume_1 = data.get('volume_1')
        volume_2 = data.get('volume_2')
        notes = data.get('notes')

        # At least one field must be provided to update
        if volume_1 is None and volume_2 is None and notes is None:
            return jsonify({"error": "At least one field (volume_1, volume_2, notes) must be provided"}), 400

        # Use your existing business logic
        result = modify_plasmid_by_string(plasmid_id, volume_1, volume_2, notes)

        return jsonify({
            "success": True,
            "message": f"Successfully modified plasmid {plasmid_id}",
            "plasmid_id": plasmid_id
        }), 200

    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/delete', methods=['DELETE'])
def delete_plasmid():
    """
    Delete a plasmid
    Expects: {"plasmid_id": "5317-1"}
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Missing request body"}), 400

        if 'plasmid_id' not in data:
            return jsonify({"error": "Missing required field: plasmid_id"}), 400

        plasmid_id = data['plasmid_id']

        # Use your existing business logic
        result = delete_plasmid_by_string(plasmid_id)

        return jsonify({
            "success": True,
            "message": f"Successfully deleted plasmid {plasmid_id}",
            "plasmid_id": plasmid_id
        }), 200

    except ValueError as e:
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    print("ðŸ§¬ Starting Plasmid Lab Management API...")
    print("ðŸ“¡ Available endpoints:")
    print("  GET  /health - Health check")
    print("  POST /api/search - Search plasmids")
    print("  POST /api/add - Add plasmid")
    print("  PUT  /api/modify - Modify plasmid")
    print("  DELETE /api/delete - Delete plasmid")
    print()
    print("ðŸš€ Server starting on http://localhost:5000")

    app.run(host='0.0.0.0', port=5000, debug=True)